//
//  BFCacheSnapshotManager.swift
//  üì∏ **ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ Í∞ÄÏÉÅÌôî Î¶¨Ïä§Ìä∏ Î≥µÏõê ÏãúÏä§ÌÖú**
//  üéØ **Step 1**: ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è Í∞ÄÏÉÅÌôî Î¶¨Ïä§Ìä∏ ÏãùÎ≥Ñ
//  üìè **Step 2**: ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ ÎßûÏ∂§ Î≥µÏõê Ï†ÑÎûµ Ïã§Ìñâ  
//  üîç **Step 3**: Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ìè¨ÏßÄÏÖò Ï†ïÎ∞Ä Î≥µÏõê
//  ‚úÖ **Step 4**: ÏµúÏ¢Ö Í≤ÄÏ¶ù Î∞è ÎØ∏ÏÑ∏ Î≥¥Ï†ï
//  ‚è∞ **Î†åÎçîÎßÅ ÎåÄÍ∏∞**: Í∞Å Îã®Í≥ÑÎ≥Ñ ÌïÑÏàò ÎåÄÍ∏∞ÏãúÍ∞Ñ Ï†ÅÏö©
//  üîí **ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ±**: Swift Ìò∏Ìôò Í∏∞Î≥∏ ÌÉÄÏûÖÎßå ÏÇ¨Ïö©
//  üöÄ **ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ ÏµúÏ†ÅÌôî**: Vue, React, Next.js, Angular Îì± ÎßûÏ∂§ Î≥µÏõê
//  üé® **Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∞êÏßÄ**: react-window, tanstack-virtual, vue-virtual-scroller Îì±

import UIKit
import WebKit
import SwiftUI

// MARK: - ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ïú†Ìã∏
fileprivate func ts() -> String {
    let f = DateFormatter()
    f.dateFormat = "HH:mm:ss.SSS"
    return f.string(from: Date())
}

// MARK: - ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÌÉÄÏûÖ Ï†ïÏùò
enum FrameworkType: String, Codable {
    case vue = "vue"
    case react = "react"
    case nextjs = "nextjs"
    case angular = "angular"
    case svelte = "svelte"
    case vanilla = "vanilla"
    case unknown = "unknown"
}

// MARK: - Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌÉÄÏûÖ
enum VirtualizationLibrary: String, Codable {
    case reactWindow = "react-window"
    case reactVirtualized = "react-virtualized"
    case tanstackVirtual = "tanstack-virtual"
    case vueVirtualScroller = "vue-virtual-scroller"
    case vueVirtualScrollList = "vue-virtual-scroll-list"
    case angularCdkScrolling = "angular-cdk-scrolling"
    case virtualScroll = "virtual-scroll"
    case none = "none"
}

// MARK: - üì∏ **ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ ÎßûÏ∂§ BFCache ÌéòÏù¥ÏßÄ Ïä§ÎÉÖÏÉ∑**
struct BFCacheSnapshot: Codable {
    let pageRecord: PageRecord
    var domSnapshot: String?
    let scrollPosition: CGPoint
    let scrollPositionPercent: CGPoint
    let contentSize: CGSize
    let viewportSize: CGSize
    let actualScrollableSize: CGSize
    var jsState: [String: Any]?
    let timestamp: Date
    var webViewSnapshotPath: String?
    let captureStatus: CaptureStatus
    let version: Int
    
    // üéØ **ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ïÎ≥¥**
    let frameworkInfo: FrameworkInfo
    
    // üîÑ **ÏàúÏ∞® Ïã§Ìñâ ÏÑ§Ï†ï**
    let restorationConfig: RestorationConfig
    
    struct FrameworkInfo: Codable {
        let type: FrameworkType
        let version: String?
        let virtualizationLib: VirtualizationLibrary
        let hasVirtualScroll: Bool
        let virtualScrollInfo: VirtualScrollInfo?
        let detectedLibraries: [String]
    }
    
    struct VirtualScrollInfo: Codable {
        let containerSelector: String?
        let itemSelector: String?
        let scrollOffset: Int
        let startIndex: Int
        let endIndex: Int
        let itemCount: Int
        let estimatedItemSize: Double
        let overscan: Int
        let scrollDirection: String // "vertical" or "horizontal"
        let measurementCache: [String: Any]?
        let visibleRange: [Int]
        
        enum CodingKeys: String, CodingKey {
            case containerSelector, itemSelector, scrollOffset, startIndex
            case endIndex, itemCount, estimatedItemSize, overscan
            case scrollDirection, measurementCache, visibleRange
        }
        
        // Custom encoding/decoding for measurementCache
        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            containerSelector = try container.decodeIfPresent(String.self, forKey: .containerSelector)
            itemSelector = try container.decodeIfPresent(String.self, forKey: .itemSelector)
            scrollOffset = try container.decode(Int.self, forKey: .scrollOffset)
            startIndex = try container.decode(Int.self, forKey: .startIndex)
            endIndex = try container.decode(Int.self, forKey: .endIndex)
            itemCount = try container.decode(Int.self, forKey: .itemCount)
            estimatedItemSize = try container.decode(Double.self, forKey: .estimatedItemSize)
            overscan = try container.decode(Int.self, forKey: .overscan)
            scrollDirection = try container.decode(String.self, forKey: .scrollDirection)
            visibleRange = try container.decode([Int].self, forKey: .visibleRange)
            
            if let cacheData = try container.decodeIfPresent(Data.self, forKey: .measurementCache) {
                measurementCache = try JSONSerialization.jsonObject(with: cacheData) as? [String: Any]
            } else {
                measurementCache = nil
            }
        }
        
        func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(containerSelector, forKey: .containerSelector)
            try container.encodeIfPresent(itemSelector, forKey: .itemSelector)
            try container.encode(scrollOffset, forKey: .scrollOffset)
            try container.encode(startIndex, forKey: .startIndex)
            try container.encode(endIndex, forKey: .endIndex)
            try container.encode(itemCount, forKey: .itemCount)
            try container.encode(estimatedItemSize, forKey: .estimatedItemSize)
            try container.encode(overscan, forKey: .overscan)
            try container.encode(scrollDirection, forKey: .scrollDirection)
            try container.encode(visibleRange, forKey: .visibleRange)
            
            if let cache = measurementCache {
                let cacheData = try JSONSerialization.data(withJSONObject: cache)
                try container.encode(cacheData, forKey: .measurementCache)
            }
        }
    }
    
    struct RestorationConfig: Codable {
        let enableFrameworkDetection: Bool   // Step 1 ÌôúÏÑ±Ìôî
        let enableVirtualScrollRestore: Bool // Step 2 ÌôúÏÑ±Ìôî  
        let enableAnchorRestore: Bool        // Step 3 ÌôúÏÑ±Ìôî
        let enableFinalVerification: Bool    // Step 4 ÌôúÏÑ±Ìôî
        let savedContentHeight: CGFloat
        let step1RenderDelay: Double
        let step2RenderDelay: Double
        let step3RenderDelay: Double
        let step4RenderDelay: Double
        let enableLazyLoadingTrigger: Bool
        let enableParentScrollRestore: Bool
        let enableIOVerification: Bool
        let frameworkSpecificDelay: Double   // ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ Ï∂îÍ∞Ä ÎåÄÍ∏∞
        
        static let `default` = RestorationConfig(
            enableFrameworkDetection: true,
            enableVirtualScrollRestore: true,
            enableAnchorRestore: true,
            enableFinalVerification: true,
            savedContentHeight: 0,
            step1RenderDelay: 0.3,
            step2RenderDelay: 0.3,
            step3RenderDelay: 0.3,
            step4RenderDelay: 0.2,
            enableLazyLoadingTrigger: true,
            enableParentScrollRestore: true,
            enableIOVerification: true,
            frameworkSpecificDelay: 0.2
        )
    }
    
    enum CaptureStatus: String, Codable {
        case complete
        case partial
        case visualOnly
        case failed
    }
    
    // CodableÏùÑ ÏúÑÌïú CodingKeys
    enum CodingKeys: String, CodingKey {
        case pageRecord, domSnapshot, scrollPosition, scrollPositionPercent
        case contentSize, viewportSize, actualScrollableSize, jsState
        case timestamp, webViewSnapshotPath, captureStatus, version
        case frameworkInfo, restorationConfig
    }
    
    // Custom encoding/decoding
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pageRecord = try container.decode(PageRecord.self, forKey: .pageRecord)
        domSnapshot = try container.decodeIfPresent(String.self, forKey: .domSnapshot)
        scrollPosition = try container.decode(CGPoint.self, forKey: .scrollPosition)
        scrollPositionPercent = try container.decodeIfPresent(CGPoint.self, forKey: .scrollPositionPercent) ?? CGPoint.zero
        contentSize = try container.decodeIfPresent(CGSize.self, forKey: .contentSize) ?? CGSize.zero
        viewportSize = try container.decodeIfPresent(CGSize.self, forKey: .viewportSize) ?? CGSize.zero
        actualScrollableSize = try container.decodeIfPresent(CGSize.self, forKey: .actualScrollableSize) ?? CGSize.zero
        frameworkInfo = try container.decode(FrameworkInfo.self, forKey: .frameworkInfo)
        restorationConfig = try container.decodeIfPresent(RestorationConfig.self, forKey: .restorationConfig) ?? RestorationConfig.default
        
        if let jsData = try container.decodeIfPresent(Data.self, forKey: .jsState) {
            jsState = try JSONSerialization.jsonObject(with: jsData) as? [String: Any]
        }
        
        timestamp = try container.decode(Date.self, forKey: .timestamp)
        webViewSnapshotPath = try container.decodeIfPresent(String.self, forKey: .webViewSnapshotPath)
        captureStatus = try container.decode(CaptureStatus.self, forKey: .captureStatus)
        version = try container.decode(Int.self, forKey: .version)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pageRecord, forKey: .pageRecord)
        try container.encodeIfPresent(domSnapshot, forKey: .domSnapshot)
        try container.encode(scrollPosition, forKey: .scrollPosition)
        try container.encode(scrollPositionPercent, forKey: .scrollPositionPercent)
        try container.encode(contentSize, forKey: .contentSize)
        try container.encode(viewportSize, forKey: .viewportSize)
        try container.encode(actualScrollableSize, forKey: .actualScrollableSize)
        try container.encode(frameworkInfo, forKey: .frameworkInfo)
        try container.encode(restorationConfig, forKey: .restorationConfig)
        
        if let js = jsState {
            let jsData = try JSONSerialization.data(withJSONObject: js)
            try container.encode(jsData, forKey: .jsState)
        }
        
        try container.encode(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(webViewSnapshotPath, forKey: .webViewSnapshotPath)
        try container.encode(captureStatus, forKey: .captureStatus)
        try container.encode(version, forKey: .version)
    }
    
    // ÏßÅÏ†ë Ï¥àÍ∏∞ÌôîÏö© init
    init(pageRecord: PageRecord,
         domSnapshot: String? = nil,
         scrollPosition: CGPoint,
         scrollPositionPercent: CGPoint = CGPoint.zero,
         contentSize: CGSize = CGSize.zero,
         viewportSize: CGSize = CGSize.zero,
         actualScrollableSize: CGSize = CGSize.zero,
         jsState: [String: Any]? = nil,
         timestamp: Date,
         webViewSnapshotPath: String? = nil,
         captureStatus: CaptureStatus = .partial,
         version: Int = 1,
         frameworkInfo: FrameworkInfo,
         restorationConfig: RestorationConfig = RestorationConfig.default) {
        self.pageRecord = pageRecord
        self.domSnapshot = domSnapshot
        self.scrollPosition = scrollPosition
        self.scrollPositionPercent = scrollPositionPercent
        self.contentSize = contentSize
        self.viewportSize = viewportSize
        self.actualScrollableSize = actualScrollableSize
        self.jsState = jsState
        self.timestamp = timestamp
        self.webViewSnapshotPath = webViewSnapshotPath
        self.captureStatus = captureStatus
        self.version = version
        self.frameworkInfo = frameworkInfo
        self.restorationConfig = RestorationConfig(
            enableFrameworkDetection: restorationConfig.enableFrameworkDetection,
            enableVirtualScrollRestore: restorationConfig.enableVirtualScrollRestore,
            enableAnchorRestore: restorationConfig.enableAnchorRestore,
            enableFinalVerification: restorationConfig.enableFinalVerification,
            savedContentHeight: max(actualScrollableSize.height, contentSize.height),
            step1RenderDelay: restorationConfig.step1RenderDelay,
            step2RenderDelay: restorationConfig.step2RenderDelay,
            step3RenderDelay: restorationConfig.step3RenderDelay,
            step4RenderDelay: restorationConfig.step4RenderDelay,
            enableLazyLoadingTrigger: restorationConfig.enableLazyLoadingTrigger,
            enableParentScrollRestore: restorationConfig.enableParentScrollRestore,
            enableIOVerification: restorationConfig.enableIOVerification,
            frameworkSpecificDelay: restorationConfig.frameworkSpecificDelay
        )
    }
    
    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Î©îÏÑúÎìú
    func loadImage() -> UIImage? {
        guard let path = webViewSnapshotPath else { return nil }
        let url = URL(fileURLWithPath: path)
        guard FileManager.default.fileExists(atPath: url.path) else { return nil }
        return UIImage(contentsOfFile: url.path)
    }
    
    // MARK: - üéØ **ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ ÏàúÏ∞®Ï†Å Î≥µÏõê ÏãúÏä§ÌÖú**
    
    private struct RestorationContext {
        let snapshot: BFCacheSnapshot
        weak var webView: WKWebView?
        let completion: (Bool) -> Void
        var overallSuccess: Bool = false
    }
    
    func restore(to webView: WKWebView, completion: @escaping (Bool) -> Void) {
        TabPersistenceManager.debugMessages.append("üéØ ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ BFCache Î≥µÏõê ÏãúÏûë")
        TabPersistenceManager.debugMessages.append("üé® Í∞êÏßÄÎêú ÌîÑÎ†àÏûÑÏõåÌÅ¨: \(frameworkInfo.type.rawValue) \(frameworkInfo.version ?? "")")
        TabPersistenceManager.debugMessages.append("üìö Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨: \(frameworkInfo.virtualizationLib.rawValue)")
        TabPersistenceManager.debugMessages.append("üéØ Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ïó¨Î∂Ä: \(frameworkInfo.hasVirtualScroll)")
        
        if let virtualInfo = frameworkInfo.virtualScrollInfo {
            TabPersistenceManager.debugMessages.append("üìä Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ï†ïÎ≥¥:")
            TabPersistenceManager.debugMessages.append("  - ÌëúÏãú Î≤îÏúÑ: \(virtualInfo.startIndex)-\(virtualInfo.endIndex)")
            TabPersistenceManager.debugMessages.append("  - Ï†ÑÏ≤¥ ÏïÑÏù¥ÌÖú: \(virtualInfo.itemCount)")
            TabPersistenceManager.debugMessages.append("  - Ïä§ÌÅ¨Î°§ Ïò§ÌîÑÏÖã: \(virtualInfo.scrollOffset)")
        }
        
        let context = RestorationContext(
            snapshot: self,
            webView: webView,
            completion: completion
        )
        
        executeStep1_FrameworkDetectionAndPrepare(context: context)
    }
    
    // MARK: - Step 1: ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è Ï§ÄÎπÑ
    private func executeStep1_FrameworkDetectionAndPrepare(context: RestorationContext) {
        TabPersistenceManager.debugMessages.append("üé® [Step 1] ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ Î≥µÏõê Ï§ÄÎπÑ ÏãúÏûë")
        
        guard restorationConfig.enableFrameworkDetection else {
            TabPersistenceManager.debugMessages.append("üé® [Step 1] ÎπÑÌôúÏÑ±ÌôîÎê® - Ïä§ÌÇµ")
            DispatchQueue.main.asyncAfter(deadline: .now() + restorationConfig.step1RenderDelay) {
                self.executeStep2_VirtualScrollRestore(context: context)
            }
            return
        }
        
        let js = generateStep1_FrameworkPrepareScript()
        
        context.webView?.evaluateJavaScript(js) { result, error in
            var step1Success = false
            
            if let error = error {
                TabPersistenceManager.debugMessages.append("üé® [Step 1] JavaScript Ïò§Î•ò: \(error.localizedDescription)")
            } else if let resultDict = result as? [String: Any] {
                step1Success = (resultDict["success"] as? Bool) ?? false
                
                if let framework = resultDict["framework"] as? String {
                    TabPersistenceManager.debugMessages.append("üé® [Step 1] ÌòÑÏû¨ ÌîÑÎ†àÏûÑÏõåÌÅ¨: \(framework)")
                }
                
                if let virtualScrollDetected = resultDict["virtualScrollDetected"] as? Bool {
                    TabPersistenceManager.debugMessages.append("üé® [Step 1] Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Í∞êÏßÄ: \(virtualScrollDetected)")
                }
                
                if let virtualLibrary = resultDict["virtualLibrary"] as? String {
                    TabPersistenceManager.debugMessages.append("üé® [Step 1] Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨: \(virtualLibrary)")
                }
                
                if let prepared = resultDict["prepared"] as? [String: Any] {
                    TabPersistenceManager.debugMessages.append("üé® [Step 1] Ï§ÄÎπÑ ÏôÑÎ£å Ìï≠Î™©: \(Array(prepared.keys))")
                }
            }
            
            TabPersistenceManager.debugMessages.append("üé® [Step 1] ÏôÑÎ£å: \(step1Success ? "ÏÑ±Í≥µ" : "Ïã§Ìå®")")
            TabPersistenceManager.debugMessages.append("‚è∞ [Step 1] Î†åÎçîÎßÅ ÎåÄÍ∏∞: \(self.restorationConfig.step1RenderDelay)Ï¥à")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + self.restorationConfig.step1RenderDelay) {
                self.executeStep2_VirtualScrollRestore(context: context)
            }
        }
    }
    
    // MARK: - Step 2: Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê
    private func executeStep2_VirtualScrollRestore(context: RestorationContext) {
        TabPersistenceManager.debugMessages.append("üéØ [Step 2] Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏãúÏûë")
        
        guard restorationConfig.enableVirtualScrollRestore,
              frameworkInfo.hasVirtualScroll,
              let virtualInfo = frameworkInfo.virtualScrollInfo else {
            TabPersistenceManager.debugMessages.append("üéØ [Step 2] Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ ÏóÜÏùå - ÏùºÎ∞ò Ïä§ÌÅ¨Î°§ Î≥µÏõê")
            executeNormalScrollRestore(context: context)
            return
        }
        
        let virtualDataJSON: String
        if let measurementCache = virtualInfo.measurementCache,
           let jsonData = try? JSONSerialization.data(withJSONObject: measurementCache),
           let jsonString = String(data: jsonData, encoding: .utf8) {
            virtualDataJSON = jsonString
        } else {
            virtualDataJSON = "{}"
        }
        
        let js = generateStep2_VirtualScrollRestoreScript(
            virtualInfo: virtualInfo,
            virtualDataJSON: virtualDataJSON
        )
        
        context.webView?.evaluateJavaScript(js) { result, error in
            var step2Success = false
            var updatedContext = context
            
            if let error = error {
                TabPersistenceManager.debugMessages.append("üéØ [Step 2] JavaScript Ïò§Î•ò: \(error.localizedDescription)")
            } else if let resultDict = result as? [String: Any] {
                step2Success = (resultDict["success"] as? Bool) ?? false
                
                if let restoredOffset = resultDict["restoredOffset"] as? Int {
                    TabPersistenceManager.debugMessages.append("üéØ [Step 2] Î≥µÏõêÎêú Ïò§ÌîÑÏÖã: \(restoredOffset)")
                }
                
                if let visibleRange = resultDict["visibleRange"] as? [Int] {
                    TabPersistenceManager.debugMessages.append("üéØ [Step 2] ÌëúÏãú Î≤îÏúÑ: \(visibleRange)")
                }
                
                if let itemsRendered = resultDict["itemsRendered"] as? Int {
                    TabPersistenceManager.debugMessages.append("üéØ [Step 2] Î†åÎçîÎßÅÎêú ÏïÑÏù¥ÌÖú: \(itemsRendered)")
                }
                
                if step2Success {
                    updatedContext.overallSuccess = true
                    TabPersistenceManager.debugMessages.append("üéØ [Step 2] ‚úÖ Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏÑ±Í≥µ")
                }
            }
            
            TabPersistenceManager.debugMessages.append("üéØ [Step 2] ÏôÑÎ£å: \(step2Success ? "ÏÑ±Í≥µ" : "Ïã§Ìå®")")
            TabPersistenceManager.debugMessages.append("‚è∞ [Step 2] Î†åÎçîÎßÅ ÎåÄÍ∏∞: \(self.restorationConfig.step2RenderDelay)Ï¥à")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + self.restorationConfig.step2RenderDelay) {
                self.executeStep3_AnchorRestore(context: updatedContext)
            }
        }
    }
    
    // ÏùºÎ∞ò Ïä§ÌÅ¨Î°§ Î≥µÏõê (Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§Ïù¥ ÏóÜÎäî Í≤ΩÏö∞)
    private func executeNormalScrollRestore(context: RestorationContext) {
        TabPersistenceManager.debugMessages.append("üìè ÏùºÎ∞ò Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏãúÏûë")
        
        let js = generateNormalScrollRestoreScript()
        
        context.webView?.evaluateJavaScript(js) { result, error in
            var success = false
            var updatedContext = context
            
            if let resultDict = result as? [String: Any] {
                success = (resultDict["success"] as? Bool) ?? false
                if success {
                    updatedContext.overallSuccess = true
                    TabPersistenceManager.debugMessages.append("üìè ‚úÖ ÏùºÎ∞ò Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏÑ±Í≥µ")
                }
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + self.restorationConfig.step2RenderDelay) {
                self.executeStep3_AnchorRestore(context: updatedContext)
            }
        }
    }
    
    // MARK: - Step 3: ÏïµÏª§ Î≥µÏõê
    private func executeStep3_AnchorRestore(context: RestorationContext) {
        TabPersistenceManager.debugMessages.append("üîç [Step 3] ÏïµÏª§ Í∏∞Î∞ò Ï†ïÎ∞Ä Î≥µÏõê ÏãúÏûë")
        
        guard restorationConfig.enableAnchorRestore else {
            TabPersistenceManager.debugMessages.append("üîç [Step 3] ÎπÑÌôúÏÑ±ÌôîÎê® - Ïä§ÌÇµ")
            DispatchQueue.main.asyncAfter(deadline: .now() + restorationConfig.step3RenderDelay) {
                self.executeStep4_FinalVerification(context: context)
            }
            return
        }
        
        var anchorDataJSON = "null"
        if let jsState = self.jsState,
           let anchorData = jsState["infiniteScrollAnchors"] as? [String: Any],
           let dataJSON = convertToJSONString(anchorData) {
            anchorDataJSON = dataJSON
        }
        
        let js = generateStep3_AnchorRestoreScript(anchorDataJSON: anchorDataJSON)
        
        context.webView?.evaluateJavaScript(js) { result, error in
            var step3Success = false
            
            if let resultDict = result as? [String: Any] {
                step3Success = (resultDict["success"] as? Bool) ?? false
                
                if let anchorCount = resultDict["anchorCount"] as? Int {
                    TabPersistenceManager.debugMessages.append("üîç [Step 3] ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïµÏª§: \(anchorCount)Í∞ú")
                }
            }
            
            TabPersistenceManager.debugMessages.append("üîç [Step 3] ÏôÑÎ£å: \(step3Success ? "ÏÑ±Í≥µ" : "Ïã§Ìå®")")
            TabPersistenceManager.debugMessages.append("‚è∞ [Step 3] Î†åÎçîÎßÅ ÎåÄÍ∏∞: \(self.restorationConfig.step3RenderDelay)Ï¥à")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + self.restorationConfig.step3RenderDelay) {
                self.executeStep4_FinalVerification(context: context)
            }
        }
    }
    
    // MARK: - Step 4: ÏµúÏ¢Ö Í≤ÄÏ¶ù
    private func executeStep4_FinalVerification(context: RestorationContext) {
        TabPersistenceManager.debugMessages.append("‚úÖ [Step 4] ÏµúÏ¢Ö Í≤ÄÏ¶ù Î∞è ÎØ∏ÏÑ∏ Î≥¥Ï†ï ÏãúÏûë")
        
        guard restorationConfig.enableFinalVerification else {
            TabPersistenceManager.debugMessages.append("‚úÖ [Step 4] ÎπÑÌôúÏÑ±ÌôîÎê® - Ïä§ÌÇµ")
            context.completion(context.overallSuccess)
            return
        }
        
        let js = generateStep4_FinalVerificationScript()
        
        context.webView?.evaluateJavaScript(js) { result, error in
            var step4Success = false
            
            if let resultDict = result as? [String: Any] {
                step4Success = (resultDict["success"] as? Bool) ?? false
                
                if let finalPosition = resultDict["finalPosition"] as? [String: Double] {
                    TabPersistenceManager.debugMessages.append("‚úÖ [Step 4] ÏµúÏ¢Ö ÏúÑÏπò: Y=\(String(format: "%.1f", finalPosition["y"] ?? 0))px")
                }
            }
            
            TabPersistenceManager.debugMessages.append("‚úÖ [Step 4] ÏôÑÎ£å: \(step4Success ? "ÏÑ±Í≥µ" : "Ïã§Ìå®")")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + self.restorationConfig.step4RenderDelay) {
                let finalSuccess = context.overallSuccess || step4Success
                TabPersistenceManager.debugMessages.append("üéØ Ï†ÑÏ≤¥ BFCache Î≥µÏõê ÏôÑÎ£å: \(finalSuccess ? "ÏÑ±Í≥µ" : "Ïã§Ìå®")")
                context.completion(finalSuccess)
            }
        }
    }
    
    // MARK: - JavaScript ÏÉùÏÑ± Î©îÏÑúÎìúÎì§
    
    private func generateStep1_FrameworkPrepareScript() -> String {
        return """
        (function() {
            try {
                const logs = [];
                
                // ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Ìï®Ïàò
                function detectFramework() {
                    // Vue Í∞êÏßÄ
                    if (typeof window.Vue !== 'undefined' || window.__VUE__) {
                        const version = window.Vue?.version || window.__VUE__?.version || 'unknown';
                        return { name: 'vue', version: version };
                    }
                    
                    // React Í∞êÏßÄ
                    if (window.React || window._react) {
                        return { name: 'react', version: window.React?.version || 'unknown' };
                    }
                    
                    // React DOM roots (React 18+)
                    const allElements = document.querySelectorAll('*');
                    for (let element of allElements) {
                        if (element._reactRootContainer || element.__reactContainer) {
                            return { name: 'react', version: '18+' };
                        }
                    }
                    
                    // Next.js Í∞êÏßÄ
                    if (window.__NEXT_DATA__ || document.getElementById('__next')) {
                        return { name: 'nextjs', version: window.__NEXT_DATA__?.buildId || 'unknown' };
                    }
                    
                    // Angular Í∞êÏßÄ
                    if (window.ng || window.getAllAngularTestabilities) {
                        return { name: 'angular', version: window.ng?.VERSION?.full || 'unknown' };
                    }
                    
                    // Svelte Í∞êÏßÄ
                    if (window.__svelte) {
                        return { name: 'svelte', version: 'unknown' };
                    }
                    
                    return { name: 'vanilla', version: null };
                }
                
                // Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∞êÏßÄ
                function detectVirtualizationLibrary() {
                    // React Window
                    if (document.querySelector('[data-react-window]') || 
                        document.querySelector('[style*="position: absolute"][style*="top:"][style*="height:"]')) {
                        return 'react-window';
                    }
                    
                    // React Virtualized
                    if (document.querySelector('.ReactVirtualized__Grid') ||
                        document.querySelector('.ReactVirtualized__List')) {
                        return 'react-virtualized';
                    }
                    
                    // TanStack Virtual
                    if (document.querySelector('[data-tanstack-virtual]') ||
                        (window.TanStack && window.TanStack.Virtual)) {
                        return 'tanstack-virtual';
                    }
                    
                    // Vue Virtual Scroller
                    if (document.querySelector('.vue-recycle-scroller') ||
                        document.querySelector('.vue-virtual-scroller')) {
                        return 'vue-virtual-scroller';
                    }
                    
                    // Angular CDK
                    if (document.querySelector('cdk-virtual-scroll-viewport')) {
                        return 'angular-cdk-scrolling';
                    }
                    
                    return 'none';
                }
                
                // Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑà Ï∞æÍ∏∞
                function findVirtualScrollContainer() {
                    const selectors = [
                        // React Window/Virtualized
                        '[style*="overflow: auto"][style*="will-change"]',
                        '[style*="overflow: auto"][style*="position: relative"]',
                        '.ReactVirtualized__Grid',
                        '.ReactVirtualized__List',
                        
                        // Vue Virtual Scroller  
                        '.vue-recycle-scroller',
                        '.vue-virtual-scroller',
                        '.virtual-list',
                        
                        // Angular CDK
                        'cdk-virtual-scroll-viewport',
                        
                        // Generic
                        '[data-virtual-scroll]',
                        '[data-virtualized]',
                        '.virtual-scroll',
                        '.virtualized-list'
                    ];
                    
                    for (let selector of selectors) {
                        const container = document.querySelector(selector);
                        if (container) return container;
                    }
                    
                    return null;
                }
                
                const framework = detectFramework();
                const virtualLib = detectVirtualizationLibrary();
                const virtualContainer = findVirtualScrollContainer();
                
                logs.push('Í∞êÏßÄÎêú ÌîÑÎ†àÏûÑÏõåÌÅ¨: ' + framework.name + ' ' + (framework.version || ''));
                logs.push('Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨: ' + virtualLib);
                logs.push('Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑà: ' + (virtualContainer ? 'Î∞úÍ≤¨' : 'ÏóÜÏùå'));
                
                // ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ Ï§ÄÎπÑ ÏûëÏóÖ
                const prepared = {};
                
                // Vue Ï§ÄÎπÑ
                if (framework.name === 'vue') {
                    if (window.Vue && window.Vue.nextTick) {
                        window.Vue.nextTick(() => {
                            console.log('Vue nextTick Ïã§ÌñâÎê®');
                        });
                        prepared.vueNextTick = true;
                    }
                }
                
                // React Ï§ÄÎπÑ
                if (framework.name === 'react' || framework.name === 'nextjs') {
                    // React Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞
                    window.dispatchEvent(new Event('resize'));
                    prepared.reactResize = true;
                }
                
                // Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ï§ÄÎπÑ
                if (virtualContainer) {
                    // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Ìä∏Î¶¨Í±∞Î°ú Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôúÏÑ±Ìôî
                    virtualContainer.dispatchEvent(new Event('scroll', { bubbles: true }));
                    prepared.virtualScroll = true;
                }
                
                return {
                    success: true,
                    framework: framework.name,
                    frameworkVersion: framework.version,
                    virtualLibrary: virtualLib,
                    virtualScrollDetected: virtualContainer !== null,
                    prepared: prepared,
                    logs: logs
                };
                
            } catch(e) {
                return {
                    success: false,
                    error: e.message,
                    logs: ['[Step 1] Ïò§Î•ò: ' + e.message]
                };
            }
        })()
        """
    }
    
    private func generateStep2_VirtualScrollRestoreScript(virtualInfo: BFCacheSnapshot.VirtualScrollInfo, virtualDataJSON: String) -> String {
        return """
        (function() {
            try {
                const logs = [];
                const virtualInfo = {
                    scrollOffset: \(virtualInfo.scrollOffset),
                    startIndex: \(virtualInfo.startIndex),
                    endIndex: \(virtualInfo.endIndex),
                    itemCount: \(virtualInfo.itemCount),
                    estimatedItemSize: \(virtualInfo.estimatedItemSize),
                    overscan: \(virtualInfo.overscan),
                    direction: '\(virtualInfo.scrollDirection)'
                };
                const measurementCache = \(virtualDataJSON);
                
                logs.push('[Step 2] Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏãúÏûë');
                logs.push('Î™©Ìëú Ïò§ÌîÑÏÖã: ' + virtualInfo.scrollOffset);
                logs.push('Î™©Ìëú Î≤îÏúÑ: ' + virtualInfo.startIndex + '-' + virtualInfo.endIndex);
                
                // Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑà Ï∞æÍ∏∞
                const container = document.querySelector('[style*="overflow: auto"]') ||
                                document.querySelector('.virtual-scroll') ||
                                document.querySelector('[data-virtual-scroll]');
                
                if (!container) {
                    logs.push('Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
                    return { success: false, logs: logs };
                }
                
                // ÌîÑÎ†àÏûÑÏõåÌÅ¨Î≥Ñ Î≥µÏõê Ï†ÑÎûµ
                let restored = false;
                let restoredOffset = 0;
                let visibleRange = [];
                
                // React Window/Virtualized Î≥µÏõê
                if (window.React || window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    // React Ïª¥Ìè¨ÎÑåÌä∏ Ïù∏Ïä§ÌÑ¥Ïä§ Ï∞æÍ∏∞
                    const fiber = container._reactInternalFiber || 
                                container._reactRootContainer?.current;
                    
                    if (fiber) {
                        // scrollOffset ÏßÅÏ†ë ÏÑ§Ï†ï ÏãúÎèÑ
                        container.scrollTop = virtualInfo.scrollOffset;
                        
                        // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
                        window.dispatchEvent(new Event('resize'));
                        
                        restored = true;
                        restoredOffset = container.scrollTop;
                        logs.push('React Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏôÑÎ£å');
                    }
                }
                
                // Vue Virtual Scroller Î≥µÏõê
                if (window.Vue || window.__VUE__) {
                    const vueInstance = container.__vue__ || container.__vueParentComponent;
                    
                    if (vueInstance && vueInstance.$refs) {
                        // Vue Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§Îü¨ API ÏÇ¨Ïö©
                        if (vueInstance.scrollToPosition) {
                            vueInstance.scrollToPosition(virtualInfo.scrollOffset);
                            restored = true;
                            restoredOffset = virtualInfo.scrollOffset;
                            logs.push('Vue Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Î≥µÏõê ÏôÑÎ£å');
                        }
                    }
                }
                
                // TanStack Virtual Î≥µÏõê
                if (window.TanStack?.Virtual) {
                    // TanStack VirtualÏùÄ initialOffsetÏùÑ ÌÜµÌï¥ Î≥µÏõê
                    container.scrollTop = virtualInfo.scrollOffset;
                    restored = true;
                    restoredOffset = container.scrollTop;
                    logs.push('TanStack Virtual Î≥µÏõê ÏôÑÎ£å');
                }
                
                // ÏùºÎ∞ò Ìè¥Î∞± Ï†ÑÎûµ
                if (!restored) {
                    // ÏßÅÏ†ë Ïä§ÌÅ¨Î°§ ÏÑ§Ï†ï
                    container.scrollTop = virtualInfo.scrollOffset;
                    
                    // Í∞ÄÏÉÅ ÏïÑÏù¥ÌÖú Í∞ïÏ†ú Î†åÎçîÎßÅ
                    const itemHeight = virtualInfo.estimatedItemSize;
                    const containerHeight = container.clientHeight;
                    const startIndex = Math.floor(virtualInfo.scrollOffset / itemHeight);
                    const endIndex = Math.ceil((virtualInfo.scrollOffset + containerHeight) / itemHeight);
                    
                    visibleRange = [startIndex, endIndex];
                    restoredOffset = container.scrollTop;
                    
                    // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ ÎîîÏä§Ìå®Ïπò
                    container.dispatchEvent(new Event('scroll', { bubbles: true }));
                    
                    logs.push('Ìè¥Î∞± Ï†ÑÎûµÏúºÎ°ú Î≥µÏõê: ' + startIndex + '-' + endIndex);
                    restored = true;
                }
                
                // Ï∏°Ï†ï Ï∫êÏãú Î≥µÏõê
                if (measurementCache && Object.keys(measurementCache).length > 0) {
                    // Ï∫êÏãú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨Ïóê Ï£ºÏûÖ
                    if (window.__virtualScrollCache) {
                        Object.assign(window.__virtualScrollCache, measurementCache);
                        logs.push('Ï∏°Ï†ï Ï∫êÏãú Î≥µÏõêÎê®: ' + Object.keys(measurementCache).length + 'Í∞ú');
                    }
                }
                
                // Î†åÎçîÎßÅÎêú ÏïÑÏù¥ÌÖú Ïàò Í≥ÑÏÇ∞
                const renderedItems = container.querySelectorAll('[style*="position: absolute"]').length ||
                                    container.querySelectorAll('.virtual-item').length;
                
                logs.push('Î†åÎçîÎßÅÎêú ÏïÑÏù¥ÌÖú: ' + renderedItems + 'Í∞ú');
                logs.push('Î≥µÏõêÎêú Ïò§ÌîÑÏÖã: ' + restoredOffset);
                
                return {
                    success: restored,
                    restoredOffset: restoredOffset,
                    visibleRange: visibleRange.length > 0 ? visibleRange : [virtualInfo.startIndex, virtualInfo.endIndex],
                    itemsRendered: renderedItems,
                    logs: logs
                };
                
            } catch(e) {
                return {
                    success: false,
                    error: e.message,
                    logs: ['[Step 2] Ïò§Î•ò: ' + e.message]
                };
            }
        })()
        """
    }
    
    private func generateNormalScrollRestoreScript() -> String {
        let targetY = scrollPosition.y
        let targetPercentY = scrollPositionPercent.y
        
        return """
        (function() {
            try {
                const logs = [];
                const targetY = \(targetY);
                const targetPercentY = \(targetPercentY);
                
                logs.push('ÏùºÎ∞ò Ïä§ÌÅ¨Î°§ Î≥µÏõê');
                logs.push('Î™©Ìëú ÏúÑÏπò: Y=' + targetY + 'px (' + targetPercentY + '%)');
                
                // ÏΩòÌÖêÏ∏† ÎÜíÏù¥ ÌôïÏù∏ Î∞è ÏµúÎåÄÍ∞í ÏàòÏ†ï
                const contentHeight = Math.max(
                    document.documentElement.scrollHeight,
                    document.body.scrollHeight,
                    document.documentElement.offsetHeight,
                    document.body.offsetHeight
                );
                const viewportHeight = window.innerHeight;
                const maxScrollY = Math.max(0, contentHeight - viewportHeight);
                
                // Ïä§ÌÅ¨Î°§ Í∞ÄÎä• Í±∞Î¶¨Í∞Ä Ï∂ïÏÜåÎêòÏóàÎäîÏßÄ ÌôïÏù∏
                if (maxScrollY < targetY) {
                    logs.push('‚ö†Ô∏è ÏµúÎåÄ Ïä§ÌÅ¨Î°§ Í±∞Î¶¨ Ï∂ïÏÜå Í∞êÏßÄ: ' + maxScrollY + ' < ' + targetY);
                    
                    // ÏΩòÌÖêÏ∏† Î°úÎî© Ìä∏Î¶¨Í±∞
                    window.scrollTo(0, maxScrollY);
                    window.dispatchEvent(new Event('scroll', { bubbles: true }));
                    window.dispatchEvent(new Event('scrollend', { bubbles: true }));
                    
                    // IntersectionObserver Ìä∏Î¶¨Í±∞
                    if (window.IntersectionObserver) {
                        const sentinel = document.createElement('div');
                        sentinel.style.height = '1px';
                        document.body.appendChild(sentinel);
                        
                        const observer = new IntersectionObserver((entries) => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    window.dispatchEvent(new Event('scroll'));
                                }
                            });
                        });
                        
                        observer.observe(sentinel);
                        setTimeout(() => {
                            document.body.removeChild(sentinel);
                        }, 100);
                    }
                }
                
                // Î∞±Î∂ÑÏú® Í∏∞Î∞ò Î≥µÏõê (Ï∂ïÏÜåÎêú Í≤ΩÏö∞ ÏÇ¨Ïö©)
                const calculatedY = (targetPercentY / 100) * maxScrollY;
                const finalY = Math.min(targetY, calculatedY, maxScrollY);
                
                window.scrollTo(0, finalY);
                document.documentElement.scrollTop = finalY;
                document.body.scrollTop = finalY;
                
                const actualY = window.scrollY || window.pageYOffset || 0;
                const diffY = Math.abs(actualY - targetY);
                
                logs.push('Î≥µÏõêÎêú ÏúÑÏπò: Y=' + actualY + 'px');
                logs.push('ÏúÑÏπò Ï∞®Ïù¥: ' + diffY + 'px');
                
                return {
                    success: diffY <= 50,
                    targetPosition: { y: targetY },
                    actualPosition: { y: actualY },
                    difference: { y: diffY },
                    maxScroll: { y: maxScrollY },
                    logs: logs
                };
                
            } catch(e) {
                return {
                    success: false,
                    error: e.message
                };
            }
        })()
        """
    }
    
    private func generateStep3_AnchorRestoreScript(anchorDataJSON: String) -> String {
        let targetY = scrollPosition.y
        
        return """
        (function() {
            try {
                const logs = [];
                const targetY = \(targetY);
                const anchorData = \(anchorDataJSON);
                
                logs.push('[Step 3] ÏïµÏª§ Í∏∞Î∞ò Î≥µÏõê');
                
                if (!anchorData || !anchorData.anchors || anchorData.anchors.length === 0) {
                    logs.push('ÏïµÏª§ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                    return { success: false, anchorCount: 0, logs: logs };
                }
                
                const anchors = anchorData.anchors;
                let foundElement = null;
                let matchedAnchor = null;
                
                // ÏïµÏª§ Îß§Ïπ≠ ÏãúÎèÑ
                for (let anchor of anchors) {
                    if (anchor.anchorType === 'vueComponent' && anchor.vueComponent) {
                        const selector = '[' + anchor.vueComponent.dataV + ']';
                        const elements = document.querySelectorAll(selector);
                        if (elements.length > 0) {
                            foundElement = elements[0];
                            matchedAnchor = anchor;
                            break;
                        }
                    } else if (anchor.anchorType === 'contentHash' && anchor.contentHash) {
                        const searchText = anchor.contentHash.text?.substring(0, 50);
                        if (searchText) {
                            const allElements = document.querySelectorAll('*');
                            for (let element of allElements) {
                                if (element.textContent?.includes(searchText)) {
                                    foundElement = element;
                                    matchedAnchor = anchor;
                                    break;
                                }
                            }
                        }
                    }
                }
                
                if (foundElement && matchedAnchor) {
                    foundElement.scrollIntoView({ behavior: 'auto', block: 'start' });
                    
                    if (matchedAnchor.offsetFromTop) {
                        window.scrollBy(0, -matchedAnchor.offsetFromTop);
                    }
                    
                    const actualY = window.scrollY || window.pageYOffset || 0;
                    const diffY = Math.abs(actualY - targetY);
                    
                    logs.push('ÏïµÏª§ Îß§Ïπ≠ ÏÑ±Í≥µ');
                    logs.push('Î≥µÏõê ÏúÑÏπò: ' + actualY);
                    
                    return {
                        success: diffY <= 100,
                        anchorCount: anchors.length,
                        restoredPosition: { y: actualY },
                        logs: logs
                    };
                }
                
                logs.push('ÏïµÏª§ Îß§Ïπ≠ Ïã§Ìå®');
                return {
                    success: false,
                    anchorCount: anchors.length,
                    logs: logs
                };
                
            } catch(e) {
                return {
                    success: false,
                    error: e.message
                };
            }
        })()
        """
    }
    
    private func generateStep4_FinalVerificationScript() -> String {
        let targetY = scrollPosition.y
        
        return """
        (function() {
            try {
                const logs = [];
                const targetY = \(targetY);
                
                logs.push('[Step 4] ÏµúÏ¢Ö Í≤ÄÏ¶ù');
                
                const currentY = window.scrollY || window.pageYOffset || 0;
                const diffY = Math.abs(currentY - targetY);
                
                if (diffY > 30) {
                    window.scrollTo(0, targetY);
                    logs.push('ÎØ∏ÏÑ∏ Î≥¥Ï†ï Ï†ÅÏö©');
                }
                
                const finalY = window.scrollY || window.pageYOffset || 0;
                const finalDiffY = Math.abs(finalY - targetY);
                
                return {
                    success: finalDiffY <= 50,
                    targetPosition: { y: targetY },
                    finalPosition: { y: finalY },
                    difference: { y: finalDiffY },
                    logs: logs
                };
                
            } catch(e) {
                return {
                    success: false,
                    error: e.message
                };
            }
        })()
        """
    }
    
    // Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìú
    private func convertToJSONString(_ object: Any) -> String? {
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: object, options: [])
            return String(data: jsonData, encoding: .utf8)
        } catch {
            TabPersistenceManager.debugMessages.append("JSON Î≥ÄÌôò Ïã§Ìå®: \(error.localizedDescription)")
            return nil
        }
    }
}

// MARK: - BFCacheTransitionSystem Ï∫êÏ≤ò/Î≥µÏõê ÌôïÏû•
extension BFCacheTransitionSystem {
    
    // MARK: - üîß **ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ïù∏Ïãù Ï∫°Ï≤ò ÏûëÏóÖ**
    
    private struct CaptureTask {
        let pageRecord: PageRecord
        let tabID: UUID?
        let type: CaptureType
        weak var webView: WKWebView?
        let requestedAt: Date = Date()
    }
    
    func captureSnapshot(pageRecord: PageRecord, webView: WKWebView?, type: CaptureType = .immediate, tabID: UUID? = nil) {
        guard let webView = webView else {
            TabPersistenceManager.debugMessages.append("‚ùå Ï∫°Ï≤ò Ïã§Ìå®: ÏõπÎ∑∞ ÏóÜÏùå - \(pageRecord.title)")
            return
        }
        
        let task = CaptureTask(pageRecord: pageRecord, tabID: tabID, type: type, webView: webView)
        
        TabPersistenceManager.debugMessages.append("üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ïù∏Ïãù Ï∫°Ï≤ò ÏãúÏûë: \(pageRecord.url.host ?? "unknown")")
        
        serialQueue.async { [weak self] in
            self?.performAtomicCapture(task)
        }
    }
    
    private func performAtomicCapture(_ task: CaptureTask) {
        let pageID = task.pageRecord.id
        
        guard let webView = task.webView else {
            TabPersistenceManager.debugMessages.append("‚ùå ÏõπÎ∑∞ Ìï¥Ï†úÎê® - Ï∫°Ï≤ò Ï∑®ÏÜå")
            return
        }
        
        TabPersistenceManager.debugMessages.append("üé® Ï∫°Ï≤ò Ïã§Ìñâ: \(task.pageRecord.title)")
        
        let captureData = DispatchQueue.main.sync { () -> CaptureData? in
            guard webView.window != nil, !webView.bounds.isEmpty else {
                TabPersistenceManager.debugMessages.append("‚ö†Ô∏è ÏõπÎ∑∞ Ï§ÄÎπÑ ÏïàÎê®")
                return nil
            }
            
            let actualScrollableWidth = max(webView.scrollView.contentSize.width, webView.scrollView.bounds.width)
            let actualScrollableHeight = max(webView.scrollView.contentSize.height, webView.scrollView.bounds.height)
            
            return CaptureData(
                scrollPosition: webView.scrollView.contentOffset,
                contentSize: webView.scrollView.contentSize,
                viewportSize: webView.bounds.size,
                actualScrollableSize: CGSize(width: actualScrollableWidth, height: actualScrollableHeight),
                bounds: webView.bounds,
                isLoading: webView.isLoading
            )
        }
        
        guard let data = captureData else {
            return
        }
        
        let captureResult = performRobustCapture(
            pageRecord: task.pageRecord,
            webView: webView,
            captureData: data,
            retryCount: task.type == .immediate ? 2 : 0
        )
        
        // ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ïÎ≥¥ Î°úÍπÖ
        TabPersistenceManager.debugMessages.append("üé® Í∞êÏßÄÎêú ÌîÑÎ†àÏûÑÏõåÌÅ¨: \(captureResult.snapshot.frameworkInfo.type.rawValue)")
        TabPersistenceManager.debugMessages.append("üé® Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨: \(captureResult.snapshot.frameworkInfo.virtualizationLib.rawValue)")
        
        if let virtualInfo = captureResult.snapshot.frameworkInfo.virtualScrollInfo {
            TabPersistenceManager.debugMessages.append("üéØ Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ï†ïÎ≥¥:")
            TabPersistenceManager.debugMessages.append("  - ÏïÑÏù¥ÌÖú Ïàò: \(virtualInfo.itemCount)")
            TabPersistenceManager.debugMessages.append("  - ÌëúÏãú Î≤îÏúÑ: \(virtualInfo.startIndex)-\(virtualInfo.endIndex)")
            TabPersistenceManager.debugMessages.append("  - Ïä§ÌÅ¨Î°§ Ïò§ÌîÑÏÖã: \(virtualInfo.scrollOffset)")
        }
        
        if let tabID = task.tabID {
            saveToDisk(snapshot: captureResult, tabID: tabID)
        } else {
            storeInMemory(captureResult.snapshot, for: pageID)
        }
        
        TabPersistenceManager.debugMessages.append("‚úÖ Ï∫°Ï≤ò ÏôÑÎ£å: \(task.pageRecord.title)")
    }
    
    private struct CaptureData {
        let scrollPosition: CGPoint
        let contentSize: CGSize
        let viewportSize: CGSize
        let actualScrollableSize: CGSize
        let bounds: CGRect
        let isLoading: Bool
    }
    
    private func performRobustCapture(pageRecord: PageRecord, webView: WKWebView, captureData: CaptureData, retryCount: Int = 0) -> (snapshot: BFCacheSnapshot, image: UIImage?) {
        
        for attempt in 0...retryCount {
            let result = attemptCapture(pageRecord: pageRecord, webView: webView, captureData: captureData)
            
            if result.snapshot.captureStatus != .failed || attempt == retryCount {
                if attempt > 0 {
                    TabPersistenceManager.debugMessages.append("üîÑ Ïû¨ÏãúÎèÑ ÌõÑ Ï∫êÏ≤ò ÏÑ±Í≥µ (ÏãúÎèÑ: \(attempt + 1))")
                }
                return result
            }
            
            TabPersistenceManager.debugMessages.append("‚è≥ Ï∫°Ï≤ò Ïã§Ìå® - Ïû¨ÏãúÎèÑ (\(attempt + 1)/\(retryCount + 1))")
            Thread.sleep(forTimeInterval: 0.08)
        }
        
        // Í∏∞Î≥∏ ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ïÎ≥¥
        let defaultFrameworkInfo = BFCacheSnapshot.FrameworkInfo(
            type: .unknown,
            version: nil,
            virtualizationLib: .none,
            hasVirtualScroll: false,
            virtualScrollInfo: nil,
            detectedLibraries: []
        )
        
        return (BFCacheSnapshot(
            pageRecord: pageRecord,
            scrollPosition: captureData.scrollPosition,
            actualScrollableSize: captureData.actualScrollableSize,
            timestamp: Date(),
            captureStatus: .failed,
            version: 1,
            frameworkInfo: defaultFrameworkInfo
        ), nil)
    }
    
    private func attemptCapture(pageRecord: PageRecord, webView: WKWebView, captureData: CaptureData) -> (snapshot: BFCacheSnapshot, image: UIImage?) {
        var visualSnapshot: UIImage? = nil
        var domSnapshot: String? = nil
        var jsState: [String: Any]? = nil
        var frameworkInfo: BFCacheSnapshot.FrameworkInfo?
        let semaphore = DispatchSemaphore(value: 0)
        
        TabPersistenceManager.debugMessages.append("üì∏ Ïä§ÎÉÖÏÉ∑ Ï∫°Ï≤ò ÏãúÎèÑ")
        
        // 1. ÎπÑÏ£ºÏñº Ïä§ÎÉÖÏÉ∑
        DispatchQueue.main.sync {
            let config = WKSnapshotConfiguration()
            config.rect = captureData.bounds
            config.afterScreenUpdates = false
            
            webView.takeSnapshot(with: config) { image, error in
                if let error = error {
                    TabPersistenceManager.debugMessages.append("üì∏ Ïä§ÎÉÖÏÉ∑ Ïã§Ìå®, fallback ÏÇ¨Ïö©: \(error.localizedDescription)")
                    visualSnapshot = self.renderWebViewToImage(webView)
                } else {
                    visualSnapshot = image
                }
                semaphore.signal()
            }
        }
        
        _ = semaphore.wait(timeout: .now() + 3.0)
        
        // 2. DOM Ï∫°Ï≤ò
        let domSemaphore = DispatchSemaphore(value: 0)
        
        DispatchQueue.main.sync {
            let domScript = """
            (function() {
                try {
                    if (document.readyState !== 'complete') return null;
                    var html = document.documentElement.outerHTML;
                    return html.length > 100000 ? html.substring(0, 100000) : html;
                } catch(e) { return null; }
            })()
            """
            
            webView.evaluateJavaScript(domScript) { result, error in
                if let dom = result as? String {
                    domSnapshot = dom
                }
                domSemaphore.signal()
            }
        }
        _ = domSemaphore.wait(timeout: .now() + 2.0)
        
        // 3. ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è JS ÏÉÅÌÉú Ï∫°Ï≤ò
        let jsSemaphore = DispatchSemaphore(value: 0)
        TabPersistenceManager.debugMessages.append("üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è JS ÏÉÅÌÉú Ï∫°Ï≤ò ÏãúÏûë")
        
        DispatchQueue.main.sync {
            let jsScript = generateFrameworkDetectionAndCaptureScript()
            
            webView.evaluateJavaScript(jsScript) { result, error in
                if let error = error {
                    TabPersistenceManager.debugMessages.append("üî• JS Ï∫°Ï≤ò Ïò§Î•ò: \(error.localizedDescription)")
                } else if let data = result as? [String: Any] {
                    jsState = data
                    
                    // ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ïÎ≥¥ ÌååÏã±
                    if let frameworkData = data["frameworkInfo"] as? [String: Any] {
                        let type = FrameworkType(rawValue: frameworkData["type"] as? String ?? "unknown") ?? .unknown
                        let version = frameworkData["version"] as? String
                        let virtLib = VirtualizationLibrary(rawValue: frameworkData["virtualizationLib"] as? String ?? "none") ?? .none
                        let hasVirtual = frameworkData["hasVirtualScroll"] as? Bool ?? false
                        let libraries = frameworkData["detectedLibraries"] as? [String] ?? []
                        
                        var virtualScrollInfo: BFCacheSnapshot.VirtualScrollInfo? = nil
                        if let virtualData = frameworkData["virtualScrollInfo"] as? [String: Any] {
                            virtualScrollInfo = BFCacheSnapshot.VirtualScrollInfo(
                                containerSelector: virtualData["containerSelector"] as? String,
                                itemSelector: virtualData["itemSelector"] as? String,
                                scrollOffset: virtualData["scrollOffset"] as? Int ?? 0,
                                startIndex: virtualData["startIndex"] as? Int ?? 0,
                                endIndex: virtualData["endIndex"] as? Int ?? 0,
                                itemCount: virtualData["itemCount"] as? Int ?? 0,
                                estimatedItemSize: virtualData["estimatedItemSize"] as? Double ?? 50,
                                overscan: virtualData["overscan"] as? Int ?? 5,
                                scrollDirection: virtualData["scrollDirection"] as? String ?? "vertical",
                                measurementCache: virtualData["measurementCache"] as? [String: Any],
                                visibleRange: virtualData["visibleRange"] as? [Int] ?? []
                            )
                        }
                        
                        frameworkInfo = BFCacheSnapshot.FrameworkInfo(
                            type: type,
                            version: version,
                            virtualizationLib: virtLib,
                            hasVirtualScroll: hasVirtual,
                            virtualScrollInfo: virtualScrollInfo,
                            detectedLibraries: libraries
                        )
                    }
                }
                jsSemaphore.signal()
            }
        }
        _ = jsSemaphore.wait(timeout: .now() + 2.0)
        
        // Ï∫°Ï≤ò ÏÉÅÌÉú Í≤∞Ï†ï
        let captureStatus: BFCacheSnapshot.CaptureStatus
        if visualSnapshot != nil && domSnapshot != nil && jsState != nil {
            captureStatus = .complete
        } else if visualSnapshot != nil {
            captureStatus = jsState != nil ? .partial : .visualOnly
        } else {
            captureStatus = .failed
        }
        
        // Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä
        let version: Int = cacheAccessQueue.sync(flags: .barrier) { [weak self] in
            guard let self = self else { return 1 }
            let currentVersion = self._cacheVersion[pageRecord.id] ?? 0
            let newVersion = currentVersion + 1
            self._cacheVersion[pageRecord.id] = newVersion
            return newVersion
        }
        
        // Î∞±Î∂ÑÏú® Í≥ÑÏÇ∞
        let scrollPercent: CGPoint
        if captureData.actualScrollableSize.height > captureData.viewportSize.height {
            let maxScrollY = max(0, captureData.actualScrollableSize.height - captureData.viewportSize.height)
            scrollPercent = CGPoint(
                x: 0,
                y: maxScrollY > 0 ? (captureData.scrollPosition.y / maxScrollY * 100.0) : 0
            )
        } else {
            scrollPercent = CGPoint.zero
        }
        
        // ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
        if frameworkInfo == nil {
            frameworkInfo = BFCacheSnapshot.FrameworkInfo(
                type: .unknown,
                version: nil,
                virtualizationLib: .none,
                hasVirtualScroll: false,
                virtualScrollInfo: nil,
                detectedLibraries: []
            )
        }
        
        // Î≥µÏõê ÏÑ§Ï†ï ÏÉùÏÑ±
        let restorationConfig = BFCacheSnapshot.RestorationConfig(
            enableFrameworkDetection: true,
            enableVirtualScrollRestore: frameworkInfo?.hasVirtualScroll ?? false,
            enableAnchorRestore: true,
            enableFinalVerification: true,
            savedContentHeight: max(captureData.actualScrollableSize.height, captureData.contentSize.height),
            step1RenderDelay: 0.3,
            step2RenderDelay: 0.4,
            step3RenderDelay: 0.2,
            step4RenderDelay: 0.3,
            enableLazyLoadingTrigger: true,
            enableParentScrollRestore: true,
            enableIOVerification: true,
            frameworkSpecificDelay: 0.2
        )
        
        let snapshot = BFCacheSnapshot(
            pageRecord: pageRecord,
            domSnapshot: domSnapshot,
            scrollPosition: captureData.scrollPosition,
            scrollPositionPercent: scrollPercent,
            contentSize: captureData.contentSize,
            viewportSize: captureData.viewportSize,
            actualScrollableSize: captureData.actualScrollableSize,
            jsState: jsState,
            timestamp: Date(),
            webViewSnapshotPath: nil,
            captureStatus: captureStatus,
            version: version,
            frameworkInfo: frameworkInfo!,
            restorationConfig: restorationConfig
        )
        
        return (snapshot, visualSnapshot)
    }
    
    // JavaScript ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è Ï∫°Ï≤ò Ïä§ÌÅ¨Î¶ΩÌä∏
    private func generateFrameworkDetectionAndCaptureScript() -> String {
        return """
        (function() {
            try {
                console.log('üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Î∞è ÏÉÅÌÉú Ï∫°Ï≤ò ÏãúÏûë');
                
                const result = {
                    frameworkInfo: {},
                    infiniteScrollAnchors: null,
                    parentScrollStates: [],
                    scroll: { x: window.scrollX || 0, y: window.scrollY || 0 },
                    href: window.location.href,
                    title: document.title,
                    timestamp: Date.now()
                };
                
                // ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ
                function detectFramework() {
                    // Vue Í∞êÏßÄ
                    if (typeof window.Vue !== 'undefined' || window.__VUE__) {
                        return {
                            type: 'vue',
                            version: window.Vue?.version || window.__VUE__?.version || null
                        };
                    }
                    
                    // React Í∞êÏßÄ
                    if (window.React || window._react || window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                        return {
                            type: 'react',
                            version: window.React?.version || null
                        };
                    }
                    
                    // React DOM roots (React 18+)
                    const allElements = document.querySelectorAll('*');
                    for (let element of allElements) {
                        if (element._reactRootContainer || element.__reactContainer) {
                            return { type: 'react', version: '18+' };
                        }
                    }
                    
                    // Next.js Í∞êÏßÄ
                    if (window.__NEXT_DATA__ || document.getElementById('__next')) {
                        return {
                            type: 'nextjs',
                            version: window.__NEXT_DATA__?.buildId || null
                        };
                    }
                    
                    // Angular Í∞êÏßÄ
                    if (window.ng || window.getAllAngularTestabilities) {
                        return {
                            type: 'angular',
                            version: window.ng?.VERSION?.full || null
                        };
                    }
                    
                    // Svelte Í∞êÏßÄ
                    if (window.__svelte) {
                        return { type: 'svelte', version: null };
                    }
                    
                    return { type: 'vanilla', version: null };
                }
                
                // Í∞ÄÏÉÅÌôî ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∞êÏßÄ
                function detectVirtualization() {
                    const detectedLibs = [];
                    let primaryLib = 'none';
                    
                    // React Window
                    if (document.querySelector('[style*="will-change: transform"][style*="position: absolute"]')) {
                        detectedLibs.push('react-window');
                        primaryLib = 'react-window';
                    }
                    
                    // React Virtualized
                    if (document.querySelector('.ReactVirtualized__Grid') ||
                        document.querySelector('.ReactVirtualized__List')) {
                        detectedLibs.push('react-virtualized');
                        if (primaryLib === 'none') primaryLib = 'react-virtualized';
                    }
                    
                    // TanStack Virtual
                    if (window.TanStack?.Virtual || document.querySelector('[data-tanstack-virtual]')) {
                        detectedLibs.push('tanstack-virtual');
                        if (primaryLib === 'none') primaryLib = 'tanstack-virtual';
                    }
                    
                    // Vue Virtual Scroller
                    if (document.querySelector('.vue-recycle-scroller') ||
                        document.querySelector('.vue-virtual-scroller')) {
                        detectedLibs.push('vue-virtual-scroller');
                        if (primaryLib === 'none') primaryLib = 'vue-virtual-scroller';
                    }
                    
                    // Angular CDK
                    if (document.querySelector('cdk-virtual-scroll-viewport')) {
                        detectedLibs.push('angular-cdk-scrolling');
                        if (primaryLib === 'none') primaryLib = 'angular-cdk-scrolling';
                    }
                    
                    return {
                        primary: primaryLib,
                        all: detectedLibs
                    };
                }
                
                // Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ï†ïÎ≥¥ ÏàòÏßë
                function collectVirtualScrollInfo() {
                    const container = document.querySelector('[style*="overflow: auto"][style*="will-change"]') ||
                                    document.querySelector('.virtual-scroll') ||
                                    document.querySelector('[data-virtual-scroll]');
                    
                    if (!container) return null;
                    
                    const items = container.querySelectorAll('[style*="position: absolute"]') ||
                                 container.querySelectorAll('.virtual-item');
                    
                    if (items.length === 0) return null;
                    
                    // ÌëúÏãú Î≤îÏúÑ Í≥ÑÏÇ∞
                    const containerRect = container.getBoundingClientRect();
                    const scrollTop = container.scrollTop;
                    const scrollLeft = container.scrollLeft;
                    
                    let startIndex = Infinity;
                    let endIndex = -1;
                    const visibleItems = [];
                    
                    items.forEach((item, index) => {
                        const rect = item.getBoundingClientRect();
                        const relativeTop = rect.top - containerRect.top;
                        
                        if (relativeTop >= 0 && relativeTop <= containerRect.height) {
                            startIndex = Math.min(startIndex, index);
                            endIndex = Math.max(endIndex, index);
                            visibleItems.push(index);
                        }
                    });
                    
                    // ÏïÑÏù¥ÌÖú ÌÅ¨Í∏∞ Ï∂îÏ†ï
                    const firstItem = items[0];
                    const estimatedItemSize = firstItem ? 
                        (firstItem.offsetHeight || firstItem.clientHeight || 50) : 50;
                    
                    // Ï∏°Ï†ï Ï∫êÏãú ÏàòÏßë (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
                    const measurementCache = {};
                    items.forEach((item, index) => {
                        measurementCache[index] = {
                            height: item.offsetHeight || 0,
                            width: item.offsetWidth || 0
                        };
                    });
                    
                    return {
                        containerSelector: container.className || container.tagName.toLowerCase(),
                        itemSelector: items[0]?.className || 'virtual-item',
                        scrollOffset: scrollTop,
                        startIndex: startIndex === Infinity ? 0 : startIndex,
                        endIndex: endIndex === -1 ? items.length - 1 : endIndex,
                        itemCount: items.length,
                        estimatedItemSize: estimatedItemSize,
                        overscan: 5,
                        scrollDirection: 'vertical',
                        measurementCache: measurementCache,
                        visibleRange: visibleItems
                    };
                }
                
                // Î∂ÄÎ™® Ïä§ÌÅ¨Î°§ ÏÉÅÌÉú ÏàòÏßë
                function collectParentScrollStates() {
                    const scrollableSelectors = [
                        '.scroll-container', '.scrollable', '[style*="overflow: auto"]',
                        '[style*="overflow: scroll"]', '[style*="overflow-y: auto"]'
                    ];
                    
                    const states = [];
                    scrollableSelectors.forEach(selector => {
                        const elements = document.querySelectorAll(selector);
                        elements.forEach(element => {
                            if (element.scrollTop > 0 || element.scrollLeft > 0) {
                                states.push({
                                    selector: selector,
                                    scrollTop: element.scrollTop,
                                    scrollLeft: element.scrollLeft
                                });
                            }
                        });
                    });
                    
                    return states;
                }
                
                // ÏïµÏª§ ÏàòÏßë (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
                function collectAnchors() {
                    const anchors = [];
                    const viewportY = window.scrollY || 0;
                    const viewportHeight = window.innerHeight;
                    
                    // Vue Ïª¥Ìè¨ÎÑåÌä∏ ÏïµÏª§
                    document.querySelectorAll('[data-v-]').forEach((element, index) => {
                        const rect = element.getBoundingClientRect();
                        const absoluteTop = viewportY + rect.top;
                        
                        if (rect.top >= 0 && rect.top <= viewportHeight) {
                            anchors.push({
                                anchorType: 'vueComponent',
                                vueComponent: {
                                    dataV: element.getAttributeNames().find(attr => attr.startsWith('data-v-')),
                                    name: element.className,
                                    index: index
                                },
                                absolutePosition: { top: absoluteTop, left: rect.left },
                                offsetFromTop: viewportY - absoluteTop
                            });
                        }
                    });
                    
                    // ÏΩòÌÖêÏ∏† Ìï¥Ïãú ÏïµÏª§
                    document.querySelectorAll('li, .item, .list-item').forEach((element, index) => {
                        const text = element.textContent?.trim();
                        if (text && text.length > 20) {
                            const rect = element.getBoundingClientRect();
                            const absoluteTop = viewportY + rect.top;
                            
                            if (rect.top >= 0 && rect.top <= viewportHeight) {
                                anchors.push({
                                    anchorType: 'contentHash',
                                    contentHash: {
                                        text: text.substring(0, 100),
                                        shortHash: text.substring(0, 8)
                                    },
                                    absolutePosition: { top: absoluteTop, left: rect.left },
                                    offsetFromTop: viewportY - absoluteTop
                                });
                            }
                        }
                    });
                    
                    return { anchors: anchors };
                }
                
                // Ïã§Ìñâ
                const framework = detectFramework();
                const virtualization = detectVirtualization();
                const virtualScrollInfo = collectVirtualScrollInfo();
                
                result.frameworkInfo = {
                    type: framework.type,
                    version: framework.version,
                    virtualizationLib: virtualization.primary,
                    hasVirtualScroll: virtualScrollInfo !== null,
                    virtualScrollInfo: virtualScrollInfo,
                    detectedLibraries: virtualization.all
                };
                
                result.parentScrollStates = collectParentScrollStates();
                result.infiniteScrollAnchors = collectAnchors();
                
                console.log('üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ ÏôÑÎ£å:', result.frameworkInfo);
                
                return result;
                
            } catch(e) {
                console.error('üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Í∞êÏßÄ Ïã§Ìå®:', e);
                return {
                    frameworkInfo: { type: 'unknown', version: null },
                    error: e.message
                };
            }
        })()
        """
    }
    
    internal func renderWebViewToImage(_ webView: WKWebView) -> UIImage? {
        let renderer = UIGraphicsImageRenderer(bounds: webView.bounds)
        return renderer.image { context in
            webView.layer.render(in: context.cgContext)
        }
    }
    
    // MARK: - üåê JavaScript Ïä§ÌÅ¨Î¶ΩÌä∏
    
    static func makeBFCacheScript() -> WKUserScript {
        let scriptSource = """
        window.addEventListener('pageshow', function(event) {
            if (event.persisted) {
                console.log('üé® ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ïù∏Ïãù BFCache ÌéòÏù¥ÏßÄ Î≥µÏõê');
            }
        });
        
        window.addEventListener('pagehide', function(event) {
            if (event.persisted) {
                console.log('üì∏ ÌîÑÎ†àÏûÑÏõåÌÅ¨ Ïù∏Ïãù BFCache ÌéòÏù¥ÏßÄ Ï†ÄÏû•');
            }
        });
        
        // Í∞ÄÏÉÅ Ïä§ÌÅ¨Î°§ Ï∏°Ï†ï Ï∫êÏãú Ï†ÑÏó≠ Î≥ÄÏàò
        window.__virtualScrollCache = window.__virtualScrollCache || {};
        """
        return WKUserScript(source: scriptSource, injectionTime: .atDocumentStart, forMainFrameOnly: false)
    }
}
